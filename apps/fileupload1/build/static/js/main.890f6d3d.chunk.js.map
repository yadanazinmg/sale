{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","selectedFile","setSelectedFile","loaded","setLoaded","className","method","action","id","type","multiple","onChange","event","console","log","target","files","Progress","max","color","value","Math","round","onClick","data","FormData","append","axios","post","onUploadProgress","ProgressEvent","total","then","res","statusText","toast","success","catch","err","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oQAoEeA,MA7Df,WACE,MAAwCC,mBAAS,MAAjD,mBAAOC,EAAP,KAAqBC,EAArB,KACA,EAA4BF,mBAAS,GAArC,mBAAOG,EAAP,KAAeC,EAAf,KA8BA,OACE,sBAAKC,UAAU,YAAf,UACE,qBAAKA,UAAU,MAAf,SACE,qBAAKA,UAAU,WAAf,SACE,sBAAMC,OAAO,OAAOC,OAAO,IAAIC,GAAG,IAAlC,SACE,sBAAKH,UAAU,mBAAf,UACE,sDACA,uBAAOI,KAAK,OAAOJ,UAAU,eAAeK,SAAS,GAAGC,SAnC5C,SAACC,GACvBC,QAAQC,IAAIF,EAAMG,OAAOC,MAAM,IAC/Bd,EAAgBU,EAAMG,OAAOC,MAAM,IACnCZ,EAAU,eAqCR,qBAAKC,UAAU,aAAf,SACE,eAACY,EAAA,EAAD,CAAUC,IAAI,MAAMC,MAAM,UAAUC,MAAOjB,EAA3C,UACGkB,KAAKC,MAAMnB,EAAQ,GADtB,SAIF,qBAAKE,UAAU,aAAf,SACE,cAAC,IAAD,MAEF,qBAAKA,UAAU,MAAf,SACE,wBAAQI,KAAK,SAASJ,UAAU,4BAA4BkB,QA3C3C,WACrB,IAAMC,EAAO,IAAIC,SACjBD,EAAKE,OAAO,OAAQzB,GACpBY,QAAQC,IAAIU,GAEZG,IACGC,KAAK,+BAAgCJ,EAAM,CAE1CK,iBAAkB,SAACC,GACjB1B,EAAW0B,EAAc3B,OAAS2B,EAAcC,MAAS,QAG5DC,MAAK,SAACC,GAELpB,QAAQC,IAAImB,EAAIC,YAChBC,IAAMC,QAAQ,qBAEfC,OAAM,SAACC,GACNH,IAAMI,MAAM,mBAyBZ,0BChDOC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBV,MAAK,YAAkD,IAA/CW,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.890f6d3d.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { Progress } from \"reactstrap\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"./App.css\";\r\n\r\nfunction App() {\r\n  const [selectedFile, setSelectedFile] = useState(null);\r\n  const [loaded, setLoaded] = useState(0);\r\n\r\n  const onChangeHandler = (event) => {\r\n    console.log(event.target.files[0]);\r\n    setSelectedFile(event.target.files[0]);\r\n    setLoaded(0);\r\n  };\r\n\r\n  const onClickHandler = () => {\r\n    const data = new FormData();\r\n    data.append(\"file\", selectedFile);\r\n    console.log(data);\r\n\r\n    axios\r\n      .post(\"http://localhost:7000/upload\", data, {\r\n        // receive two parameter endpoint url ,form data\r\n        onUploadProgress: (ProgressEvent) => {\r\n          setLoaded((ProgressEvent.loaded / ProgressEvent.total) * 100);\r\n        },\r\n      })\r\n      .then((res) => {\r\n        // then print response status\r\n        console.log(res.statusText);\r\n        toast.success(\"upload success\");\r\n      })\r\n      .catch((err) => {\r\n        toast.error(\"upload fail\");\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"row\">\r\n        <div className=\"col-md-6\">\r\n          <form method=\"post\" action=\"#\" id=\"#\">\r\n            <div className=\"form-group files\">\r\n              <label>Upload Your File </label>\r\n              <input type=\"file\" className=\"form-control\" multiple=\"\" onChange={onChangeHandler} />\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </div>\r\n      <div className=\"form-group\">\r\n        <Progress max=\"100\" color=\"success\" value={loaded}>\r\n          {Math.round(loaded, 2)}%\r\n        </Progress>\r\n      </div>\r\n      <div className=\"form-group\">\r\n        <ToastContainer />\r\n      </div>\r\n      <div className=\"row\">\r\n        <button type=\"button\" className=\"btn btn-success btn-block\" onClick={onClickHandler}>\r\n          Upload\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}