# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type AffectedRowsOutput {
  count: Int!
}

type AggregateInstallmentRecord {
  _avg: InstallmentRecordAvgAggregate
  _count: InstallmentRecordCountAggregate
  _max: InstallmentRecordMaxAggregate
  _min: InstallmentRecordMinAggregate
  _sum: InstallmentRecordSumAggregate
}

type AggregateItem {
  _count: ItemCountAggregate
  _max: ItemMaxAggregate
  _min: ItemMinAggregate
}

type AggregateSaleRecord {
  _avg: SaleRecordAvgAggregate
  _count: SaleRecordCountAggregate
  _max: SaleRecordMaxAggregate
  _min: SaleRecordMinAggregate
  _sum: SaleRecordSumAggregate
}

type AggregateShop {
  _count: ShopCountAggregate
  _max: ShopMaxAggregate
  _min: ShopMinAggregate
}

type AggregateSystemData {
  _count: SystemDataCountAggregate
  _max: SystemDataMaxAggregate
  _min: SystemDataMinAggregate
}

type AggregateUser {
  _avg: UserAvgAggregate
  _count: UserCountAggregate
  _max: UserMaxAggregate
  _min: UserMinAggregate
  _sum: UserSumAggregate
}

input BoolFieldUpdateOperationsInput {
  set: Boolean
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input BoolWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedBoolFilter
  _min: NestedBoolFilter
  equals: Boolean
  not: NestedBoolWithAggregatesFilter
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input DateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input DateTimeNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedDateTimeNullableFilter
  _min: NestedDateTimeNullableFilter
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableWithAggregatesFilter
  notIn: [DateTime!]
}

input DateTimeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedDateTimeFilter
  _min: NestedDateTimeFilter
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeWithAggregatesFilter
  notIn: [DateTime!]
}

input EnumProductStatusFieldUpdateOperationsInput {
  set: ProductStatus
}

input EnumProductStatusFilter {
  equals: ProductStatus
  in: [ProductStatus!]
  not: NestedEnumProductStatusFilter
  notIn: [ProductStatus!]
}

input EnumProductStatusWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumProductStatusFilter
  _min: NestedEnumProductStatusFilter
  equals: ProductStatus
  in: [ProductStatus!]
  not: NestedEnumProductStatusWithAggregatesFilter
  notIn: [ProductStatus!]
}

input EnumRoleFieldUpdateOperationsInput {
  set: Role
}

input EnumRoleFilter {
  equals: Role
  in: [Role!]
  not: NestedEnumRoleFilter
  notIn: [Role!]
}

input EnumRoleWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumRoleFilter
  _min: NestedEnumRoleFilter
  equals: Role
  in: [Role!]
  not: NestedEnumRoleWithAggregatesFilter
  notIn: [Role!]
}

type InstallmentRecord {
  amount: Int!
  created_at: DateTime!
  customer: SaleRecord
  customer_id: String
  id: String!
  net_amount: Int!
  particular: String
  price: Int!
  qty: Int!
  updated_at: DateTime!
  user: User
  user_id: String!
}

type InstallmentRecordAvgAggregate {
  amount: Float
  net_amount: Float
  price: Float
  qty: Float
}

input InstallmentRecordAvgOrderByAggregateInput {
  amount: SortOrder
  net_amount: SortOrder
  price: SortOrder
  qty: SortOrder
}

type InstallmentRecordCountAggregate {
  _all: Int!
  amount: Int!
  created_at: Int!
  customer_id: Int!
  id: Int!
  net_amount: Int!
  particular: Int!
  price: Int!
  qty: Int!
  updated_at: Int!
  user_id: Int!
}

input InstallmentRecordCountOrderByAggregateInput {
  amount: SortOrder
  created_at: SortOrder
  customer_id: SortOrder
  id: SortOrder
  net_amount: SortOrder
  particular: SortOrder
  price: SortOrder
  qty: SortOrder
  updated_at: SortOrder
  user_id: SortOrder
}

input InstallmentRecordCreateInput {
  amount: Int!
  created_at: DateTime
  customer: SaleRecordCreateNestedOneWithoutInstallment_recordsInput
  id: String
  net_amount: Int!
  particular: String
  price: Int!
  qty: Int!
  updated_at: DateTime
  user: UserCreateNestedOneWithoutInstallments_recordsInput
}

input InstallmentRecordCreateManyCustomerInput {
  amount: Int!
  created_at: DateTime
  id: String
  net_amount: Int!
  particular: String
  price: Int!
  qty: Int!
  updated_at: DateTime
  user_id: String!
}

input InstallmentRecordCreateManyCustomerInputEnvelope {
  data: [InstallmentRecordCreateManyCustomerInput!]!
  skipDuplicates: Boolean
}

input InstallmentRecordCreateManyInput {
  amount: Int!
  created_at: DateTime
  customer_id: String
  id: String
  net_amount: Int!
  particular: String
  price: Int!
  qty: Int!
  updated_at: DateTime
  user_id: String!
}

input InstallmentRecordCreateManyUserInput {
  amount: Int!
  created_at: DateTime
  customer_id: String
  id: String
  net_amount: Int!
  particular: String
  price: Int!
  qty: Int!
  updated_at: DateTime
}

input InstallmentRecordCreateManyUserInputEnvelope {
  data: [InstallmentRecordCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input InstallmentRecordCreateNestedManyWithoutCustomerInput {
  connect: [InstallmentRecordWhereUniqueInput!]
  connectOrCreate: [InstallmentRecordCreateOrConnectWithoutCustomerInput!]
  create: [InstallmentRecordCreateWithoutCustomerInput!]
  createMany: InstallmentRecordCreateManyCustomerInputEnvelope
}

input InstallmentRecordCreateNestedManyWithoutUserInput {
  connect: [InstallmentRecordWhereUniqueInput!]
  connectOrCreate: [InstallmentRecordCreateOrConnectWithoutUserInput!]
  create: [InstallmentRecordCreateWithoutUserInput!]
  createMany: InstallmentRecordCreateManyUserInputEnvelope
}

input InstallmentRecordCreateOrConnectWithoutCustomerInput {
  create: InstallmentRecordCreateWithoutCustomerInput!
  where: InstallmentRecordWhereUniqueInput!
}

input InstallmentRecordCreateOrConnectWithoutUserInput {
  create: InstallmentRecordCreateWithoutUserInput!
  where: InstallmentRecordWhereUniqueInput!
}

input InstallmentRecordCreateWithoutCustomerInput {
  amount: Int!
  created_at: DateTime
  id: String
  net_amount: Int!
  particular: String
  price: Int!
  qty: Int!
  updated_at: DateTime
  user: UserCreateNestedOneWithoutInstallments_recordsInput
}

input InstallmentRecordCreateWithoutUserInput {
  amount: Int!
  created_at: DateTime
  customer: SaleRecordCreateNestedOneWithoutInstallment_recordsInput
  id: String
  net_amount: Int!
  particular: String
  price: Int!
  qty: Int!
  updated_at: DateTime
}

type InstallmentRecordGroupBy {
  _avg: InstallmentRecordAvgAggregate
  _count: InstallmentRecordCountAggregate
  _max: InstallmentRecordMaxAggregate
  _min: InstallmentRecordMinAggregate
  _sum: InstallmentRecordSumAggregate
  amount: Int!
  created_at: DateTime!
  customer_id: String
  id: String!
  net_amount: Int!
  particular: String
  price: Int!
  qty: Int!
  updated_at: DateTime!
  user_id: String!
}

input InstallmentRecordListRelationFilter {
  every: InstallmentRecordWhereInput
  none: InstallmentRecordWhereInput
  some: InstallmentRecordWhereInput
}

type InstallmentRecordMaxAggregate {
  amount: Int
  created_at: DateTime
  customer_id: String
  id: String
  net_amount: Int
  particular: String
  price: Int
  qty: Int
  updated_at: DateTime
  user_id: String
}

input InstallmentRecordMaxOrderByAggregateInput {
  amount: SortOrder
  created_at: SortOrder
  customer_id: SortOrder
  id: SortOrder
  net_amount: SortOrder
  particular: SortOrder
  price: SortOrder
  qty: SortOrder
  updated_at: SortOrder
  user_id: SortOrder
}

type InstallmentRecordMinAggregate {
  amount: Int
  created_at: DateTime
  customer_id: String
  id: String
  net_amount: Int
  particular: String
  price: Int
  qty: Int
  updated_at: DateTime
  user_id: String
}

input InstallmentRecordMinOrderByAggregateInput {
  amount: SortOrder
  created_at: SortOrder
  customer_id: SortOrder
  id: SortOrder
  net_amount: SortOrder
  particular: SortOrder
  price: SortOrder
  qty: SortOrder
  updated_at: SortOrder
  user_id: SortOrder
}

input InstallmentRecordOrderByRelationAggregateInput {
  _count: SortOrder
}

input InstallmentRecordOrderByWithAggregationInput {
  _avg: InstallmentRecordAvgOrderByAggregateInput
  _count: InstallmentRecordCountOrderByAggregateInput
  _max: InstallmentRecordMaxOrderByAggregateInput
  _min: InstallmentRecordMinOrderByAggregateInput
  _sum: InstallmentRecordSumOrderByAggregateInput
  amount: SortOrder
  created_at: SortOrder
  customer_id: SortOrder
  id: SortOrder
  net_amount: SortOrder
  particular: SortOrder
  price: SortOrder
  qty: SortOrder
  updated_at: SortOrder
  user_id: SortOrder
}

input InstallmentRecordOrderByWithRelationInput {
  amount: SortOrder
  created_at: SortOrder
  customer: SaleRecordOrderByWithRelationInput
  customer_id: SortOrder
  id: SortOrder
  net_amount: SortOrder
  particular: SortOrder
  price: SortOrder
  qty: SortOrder
  updated_at: SortOrder
  user: UserOrderByWithRelationInput
  user_id: SortOrder
}

enum InstallmentRecordScalarFieldEnum {
  amount
  created_at
  customer_id
  id
  net_amount
  particular
  price
  qty
  updated_at
  user_id
}

input InstallmentRecordScalarWhereInput {
  AND: [InstallmentRecordScalarWhereInput!]
  NOT: [InstallmentRecordScalarWhereInput!]
  OR: [InstallmentRecordScalarWhereInput!]
  amount: IntFilter
  created_at: DateTimeFilter
  customer_id: StringNullableFilter
  id: StringFilter
  net_amount: IntFilter
  particular: StringNullableFilter
  price: IntFilter
  qty: IntFilter
  updated_at: DateTimeFilter
  user_id: StringFilter
}

input InstallmentRecordScalarWhereWithAggregatesInput {
  AND: [InstallmentRecordScalarWhereWithAggregatesInput!]
  NOT: [InstallmentRecordScalarWhereWithAggregatesInput!]
  OR: [InstallmentRecordScalarWhereWithAggregatesInput!]
  amount: IntWithAggregatesFilter
  created_at: DateTimeWithAggregatesFilter
  customer_id: StringNullableWithAggregatesFilter
  id: StringWithAggregatesFilter
  net_amount: IntWithAggregatesFilter
  particular: StringNullableWithAggregatesFilter
  price: IntWithAggregatesFilter
  qty: IntWithAggregatesFilter
  updated_at: DateTimeWithAggregatesFilter
  user_id: StringWithAggregatesFilter
}

type InstallmentRecordSumAggregate {
  amount: Int
  net_amount: Int
  price: Int
  qty: Int
}

input InstallmentRecordSumOrderByAggregateInput {
  amount: SortOrder
  net_amount: SortOrder
  price: SortOrder
  qty: SortOrder
}

input InstallmentRecordUpdateInput {
  amount: IntFieldUpdateOperationsInput
  created_at: DateTimeFieldUpdateOperationsInput
  customer: SaleRecordUpdateOneWithoutInstallment_recordsInput
  id: StringFieldUpdateOperationsInput
  net_amount: IntFieldUpdateOperationsInput
  particular: NullableStringFieldUpdateOperationsInput
  price: IntFieldUpdateOperationsInput
  qty: IntFieldUpdateOperationsInput
  updated_at: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneWithoutInstallments_recordsInput
}

input InstallmentRecordUpdateManyMutationInput {
  amount: IntFieldUpdateOperationsInput
  created_at: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  net_amount: IntFieldUpdateOperationsInput
  particular: NullableStringFieldUpdateOperationsInput
  price: IntFieldUpdateOperationsInput
  qty: IntFieldUpdateOperationsInput
  updated_at: DateTimeFieldUpdateOperationsInput
}

input InstallmentRecordUpdateManyWithWhereWithoutCustomerInput {
  data: InstallmentRecordUpdateManyMutationInput!
  where: InstallmentRecordScalarWhereInput!
}

input InstallmentRecordUpdateManyWithWhereWithoutUserInput {
  data: InstallmentRecordUpdateManyMutationInput!
  where: InstallmentRecordScalarWhereInput!
}

input InstallmentRecordUpdateManyWithoutCustomerInput {
  connect: [InstallmentRecordWhereUniqueInput!]
  connectOrCreate: [InstallmentRecordCreateOrConnectWithoutCustomerInput!]
  create: [InstallmentRecordCreateWithoutCustomerInput!]
  createMany: InstallmentRecordCreateManyCustomerInputEnvelope
  delete: [InstallmentRecordWhereUniqueInput!]
  deleteMany: [InstallmentRecordScalarWhereInput!]
  disconnect: [InstallmentRecordWhereUniqueInput!]
  set: [InstallmentRecordWhereUniqueInput!]
  update: [InstallmentRecordUpdateWithWhereUniqueWithoutCustomerInput!]
  updateMany: [InstallmentRecordUpdateManyWithWhereWithoutCustomerInput!]
  upsert: [InstallmentRecordUpsertWithWhereUniqueWithoutCustomerInput!]
}

input InstallmentRecordUpdateManyWithoutUserInput {
  connect: [InstallmentRecordWhereUniqueInput!]
  connectOrCreate: [InstallmentRecordCreateOrConnectWithoutUserInput!]
  create: [InstallmentRecordCreateWithoutUserInput!]
  createMany: InstallmentRecordCreateManyUserInputEnvelope
  delete: [InstallmentRecordWhereUniqueInput!]
  deleteMany: [InstallmentRecordScalarWhereInput!]
  disconnect: [InstallmentRecordWhereUniqueInput!]
  set: [InstallmentRecordWhereUniqueInput!]
  update: [InstallmentRecordUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [InstallmentRecordUpdateManyWithWhereWithoutUserInput!]
  upsert: [InstallmentRecordUpsertWithWhereUniqueWithoutUserInput!]
}

input InstallmentRecordUpdateWithWhereUniqueWithoutCustomerInput {
  data: InstallmentRecordUpdateWithoutCustomerInput!
  where: InstallmentRecordWhereUniqueInput!
}

input InstallmentRecordUpdateWithWhereUniqueWithoutUserInput {
  data: InstallmentRecordUpdateWithoutUserInput!
  where: InstallmentRecordWhereUniqueInput!
}

input InstallmentRecordUpdateWithoutCustomerInput {
  amount: IntFieldUpdateOperationsInput
  created_at: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  net_amount: IntFieldUpdateOperationsInput
  particular: NullableStringFieldUpdateOperationsInput
  price: IntFieldUpdateOperationsInput
  qty: IntFieldUpdateOperationsInput
  updated_at: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneWithoutInstallments_recordsInput
}

input InstallmentRecordUpdateWithoutUserInput {
  amount: IntFieldUpdateOperationsInput
  created_at: DateTimeFieldUpdateOperationsInput
  customer: SaleRecordUpdateOneWithoutInstallment_recordsInput
  id: StringFieldUpdateOperationsInput
  net_amount: IntFieldUpdateOperationsInput
  particular: NullableStringFieldUpdateOperationsInput
  price: IntFieldUpdateOperationsInput
  qty: IntFieldUpdateOperationsInput
  updated_at: DateTimeFieldUpdateOperationsInput
}

input InstallmentRecordUpsertWithWhereUniqueWithoutCustomerInput {
  create: InstallmentRecordCreateWithoutCustomerInput!
  update: InstallmentRecordUpdateWithoutCustomerInput!
  where: InstallmentRecordWhereUniqueInput!
}

input InstallmentRecordUpsertWithWhereUniqueWithoutUserInput {
  create: InstallmentRecordCreateWithoutUserInput!
  update: InstallmentRecordUpdateWithoutUserInput!
  where: InstallmentRecordWhereUniqueInput!
}

input InstallmentRecordWhereInput {
  AND: [InstallmentRecordWhereInput!]
  NOT: [InstallmentRecordWhereInput!]
  OR: [InstallmentRecordWhereInput!]
  amount: IntFilter
  created_at: DateTimeFilter
  customer: SaleRecordRelationFilter
  customer_id: StringNullableFilter
  id: StringFilter
  net_amount: IntFilter
  particular: StringNullableFilter
  price: IntFilter
  qty: IntFilter
  updated_at: DateTimeFilter
  user: UserRelationFilter
  user_id: StringFilter
}

input InstallmentRecordWhereUniqueInput {
  id: String
}

input IntFieldUpdateOperationsInput {
  decrement: Int
  divide: Int
  increment: Int
  multiply: Int
  set: Int
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input IntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input IntNullableWithAggregatesFilter {
  _avg: NestedFloatNullableFilter
  _count: NestedIntNullableFilter
  _max: NestedIntNullableFilter
  _min: NestedIntNullableFilter
  _sum: NestedIntNullableFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableWithAggregatesFilter
  notIn: [Int!]
}

input IntWithAggregatesFilter {
  _avg: NestedFloatFilter
  _count: NestedIntFilter
  _max: NestedIntFilter
  _min: NestedIntFilter
  _sum: NestedIntFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntWithAggregatesFilter
  notIn: [Int!]
}

type Item {
  created_at: DateTime!
  description: String!
  id: String!
  name: String!
  updated_at: DateTime!
}

type ItemCountAggregate {
  _all: Int!
  created_at: Int!
  description: Int!
  id: Int!
  name: Int!
  updated_at: Int!
}

input ItemCountOrderByAggregateInput {
  created_at: SortOrder
  description: SortOrder
  id: SortOrder
  name: SortOrder
  updated_at: SortOrder
}

input ItemCreateInput {
  created_at: DateTime
  description: String!
  id: String
  name: String!
  updated_at: DateTime
}

input ItemCreateManyInput {
  created_at: DateTime
  description: String!
  id: String
  name: String!
  updated_at: DateTime
}

type ItemGroupBy {
  _count: ItemCountAggregate
  _max: ItemMaxAggregate
  _min: ItemMinAggregate
  created_at: DateTime!
  description: String!
  id: String!
  name: String!
  updated_at: DateTime!
}

type ItemMaxAggregate {
  created_at: DateTime
  description: String
  id: String
  name: String
  updated_at: DateTime
}

input ItemMaxOrderByAggregateInput {
  created_at: SortOrder
  description: SortOrder
  id: SortOrder
  name: SortOrder
  updated_at: SortOrder
}

type ItemMinAggregate {
  created_at: DateTime
  description: String
  id: String
  name: String
  updated_at: DateTime
}

input ItemMinOrderByAggregateInput {
  created_at: SortOrder
  description: SortOrder
  id: SortOrder
  name: SortOrder
  updated_at: SortOrder
}

input ItemOrderByWithAggregationInput {
  _count: ItemCountOrderByAggregateInput
  _max: ItemMaxOrderByAggregateInput
  _min: ItemMinOrderByAggregateInput
  created_at: SortOrder
  description: SortOrder
  id: SortOrder
  name: SortOrder
  updated_at: SortOrder
}

input ItemOrderByWithRelationInput {
  created_at: SortOrder
  description: SortOrder
  id: SortOrder
  name: SortOrder
  updated_at: SortOrder
}

enum ItemScalarFieldEnum {
  created_at
  description
  id
  name
  updated_at
}

input ItemScalarWhereWithAggregatesInput {
  AND: [ItemScalarWhereWithAggregatesInput!]
  NOT: [ItemScalarWhereWithAggregatesInput!]
  OR: [ItemScalarWhereWithAggregatesInput!]
  created_at: DateTimeWithAggregatesFilter
  description: StringWithAggregatesFilter
  id: StringWithAggregatesFilter
  name: StringWithAggregatesFilter
  updated_at: DateTimeWithAggregatesFilter
}

input ItemUpdateInput {
  created_at: DateTimeFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updated_at: DateTimeFieldUpdateOperationsInput
}

input ItemUpdateManyMutationInput {
  created_at: DateTimeFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updated_at: DateTimeFieldUpdateOperationsInput
}

input ItemWhereInput {
  AND: [ItemWhereInput!]
  NOT: [ItemWhereInput!]
  OR: [ItemWhereInput!]
  created_at: DateTimeFilter
  description: StringFilter
  id: StringFilter
  name: StringFilter
  updated_at: DateTimeFilter
}

input ItemWhereUniqueInput {
  id: String
}

type Mutation {
  createInstallmentRecord(data: InstallmentRecordCreateInput!): InstallmentRecord!
  createItem(data: ItemCreateInput!): Item!
  createManyInstallmentRecord(data: [InstallmentRecordCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyItem(data: [ItemCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManySaleRecord(data: [SaleRecordCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyShop(data: [ShopCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManySystemData(data: [SystemDataCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyUser(data: [UserCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createSaleRecord(data: SaleRecordCreateInput!): SaleRecord!
  createShop(data: ShopCreateInput!): Shop!
  createSystemData(data: SystemDataCreateInput!): SystemData!
  createUser(data: UserCreateInput!): User!
  deleteInstallmentRecord(where: InstallmentRecordWhereUniqueInput!): InstallmentRecord
  deleteItem(where: ItemWhereUniqueInput!): Item
  deleteManyInstallmentRecord(where: InstallmentRecordWhereInput): AffectedRowsOutput!
  deleteManyItem(where: ItemWhereInput): AffectedRowsOutput!
  deleteManySaleRecord(where: SaleRecordWhereInput): AffectedRowsOutput!
  deleteManyShop(where: ShopWhereInput): AffectedRowsOutput!
  deleteManySystemData(where: SystemDataWhereInput): AffectedRowsOutput!
  deleteManyUser(where: UserWhereInput): AffectedRowsOutput!
  deleteSaleRecord(where: SaleRecordWhereUniqueInput!): SaleRecord
  deleteShop(where: ShopWhereUniqueInput!): Shop
  deleteSystemData(where: SystemDataWhereUniqueInput!): SystemData
  deleteUser(where: UserWhereUniqueInput!): User
  insertAppUser(name: String!, password: String!, role: Role!): User
  revokeRefreshTokensForUser(name: String!): Boolean!
  signIn(name: String!, pwd: String!): SignInResponse
  signOut: Boolean!
  updateInstallmentRecord(data: InstallmentRecordUpdateInput!, where: InstallmentRecordWhereUniqueInput!): InstallmentRecord
  updateItem(data: ItemUpdateInput!, where: ItemWhereUniqueInput!): Item
  updateManyInstallmentRecord(data: InstallmentRecordUpdateManyMutationInput!, where: InstallmentRecordWhereInput): AffectedRowsOutput!
  updateManyItem(data: ItemUpdateManyMutationInput!, where: ItemWhereInput): AffectedRowsOutput!
  updateManySaleRecord(data: SaleRecordUpdateManyMutationInput!, where: SaleRecordWhereInput): AffectedRowsOutput!
  updateManyShop(data: ShopUpdateManyMutationInput!, where: ShopWhereInput): AffectedRowsOutput!
  updateManySystemData(data: SystemDataUpdateManyMutationInput!, where: SystemDataWhereInput): AffectedRowsOutput!
  updateManyUser(data: UserUpdateManyMutationInput!, where: UserWhereInput): AffectedRowsOutput!
  updateSaleRecord(data: SaleRecordUpdateInput!, where: SaleRecordWhereUniqueInput!): SaleRecord
  updateShop(data: ShopUpdateInput!, where: ShopWhereUniqueInput!): Shop
  updateSystemData(data: SystemDataUpdateInput!, where: SystemDataWhereUniqueInput!): SystemData
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  upsertAppUser(name: String!, password: String!, role: Role!): User
  upsertInstallmentRecord(create: InstallmentRecordCreateInput!, update: InstallmentRecordUpdateInput!, where: InstallmentRecordWhereUniqueInput!): InstallmentRecord!
  upsertItem(create: ItemCreateInput!, update: ItemUpdateInput!, where: ItemWhereUniqueInput!): Item!
  upsertSaleRecord(create: SaleRecordCreateInput!, update: SaleRecordUpdateInput!, where: SaleRecordWhereUniqueInput!): SaleRecord!
  upsertShop(create: ShopCreateInput!, update: ShopUpdateInput!, where: ShopWhereUniqueInput!): Shop!
  upsertSystemData(create: SystemDataCreateInput!, update: SystemDataUpdateInput!, where: SystemDataWhereUniqueInput!): SystemData!
  upsertUser(create: UserCreateInput!, update: UserUpdateInput!, where: UserWhereUniqueInput!): User!
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedBoolWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedBoolFilter
  _min: NestedBoolFilter
  equals: Boolean
  not: NestedBoolWithAggregatesFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedDateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input NestedDateTimeNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedDateTimeNullableFilter
  _min: NestedDateTimeNullableFilter
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableWithAggregatesFilter
  notIn: [DateTime!]
}

input NestedDateTimeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedDateTimeFilter
  _min: NestedDateTimeFilter
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeWithAggregatesFilter
  notIn: [DateTime!]
}

input NestedEnumProductStatusFilter {
  equals: ProductStatus
  in: [ProductStatus!]
  not: NestedEnumProductStatusFilter
  notIn: [ProductStatus!]
}

input NestedEnumProductStatusWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumProductStatusFilter
  _min: NestedEnumProductStatusFilter
  equals: ProductStatus
  in: [ProductStatus!]
  not: NestedEnumProductStatusWithAggregatesFilter
  notIn: [ProductStatus!]
}

input NestedEnumRoleFilter {
  equals: Role
  in: [Role!]
  not: NestedEnumRoleFilter
  notIn: [Role!]
}

input NestedEnumRoleWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumRoleFilter
  _min: NestedEnumRoleFilter
  equals: Role
  in: [Role!]
  not: NestedEnumRoleWithAggregatesFilter
  notIn: [Role!]
}

input NestedFloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float!]
}

input NestedFloatNullableFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatNullableFilter
  notIn: [Float!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedIntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input NestedIntNullableWithAggregatesFilter {
  _avg: NestedFloatNullableFilter
  _count: NestedIntNullableFilter
  _max: NestedIntNullableFilter
  _min: NestedIntNullableFilter
  _sum: NestedIntNullableFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableWithAggregatesFilter
  notIn: [Int!]
}

input NestedIntWithAggregatesFilter {
  _avg: NestedFloatFilter
  _count: NestedIntFilter
  _max: NestedIntFilter
  _min: NestedIntFilter
  _sum: NestedIntFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntWithAggregatesFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedStringNullableFilter
  _min: NestedStringNullableFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

input NullableDateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input NullableIntFieldUpdateOperationsInput {
  decrement: Int
  divide: Int
  increment: Int
  multiply: Int
  set: Int
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

enum ProductStatus {
  AFTER
  BEFORE
}

type Query {
  aggregateInstallmentRecord(cursor: InstallmentRecordWhereUniqueInput, orderBy: [InstallmentRecordOrderByWithRelationInput!], skip: Int, take: Int, where: InstallmentRecordWhereInput): AggregateInstallmentRecord!
  aggregateItem(cursor: ItemWhereUniqueInput, orderBy: [ItemOrderByWithRelationInput!], skip: Int, take: Int, where: ItemWhereInput): AggregateItem!
  aggregateSaleRecord(cursor: SaleRecordWhereUniqueInput, orderBy: [SaleRecordOrderByWithRelationInput!], skip: Int, take: Int, where: SaleRecordWhereInput): AggregateSaleRecord!
  aggregateShop(cursor: ShopWhereUniqueInput, orderBy: [ShopOrderByWithRelationInput!], skip: Int, take: Int, where: ShopWhereInput): AggregateShop!
  aggregateSystemData(cursor: SystemDataWhereUniqueInput, orderBy: [SystemDataOrderByWithRelationInput!], skip: Int, take: Int, where: SystemDataWhereInput): AggregateSystemData!
  aggregateUser(cursor: UserWhereUniqueInput, orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): AggregateUser!
  findFirstInstallmentRecord(cursor: InstallmentRecordWhereUniqueInput, distinct: [InstallmentRecordScalarFieldEnum!], orderBy: [InstallmentRecordOrderByWithRelationInput!], skip: Int, take: Int, where: InstallmentRecordWhereInput): InstallmentRecord
  findFirstItem(cursor: ItemWhereUniqueInput, distinct: [ItemScalarFieldEnum!], orderBy: [ItemOrderByWithRelationInput!], skip: Int, take: Int, where: ItemWhereInput): Item
  findFirstSaleRecord(cursor: SaleRecordWhereUniqueInput, distinct: [SaleRecordScalarFieldEnum!], orderBy: [SaleRecordOrderByWithRelationInput!], skip: Int, take: Int, where: SaleRecordWhereInput): SaleRecord
  findFirstShop(cursor: ShopWhereUniqueInput, distinct: [ShopScalarFieldEnum!], orderBy: [ShopOrderByWithRelationInput!], skip: Int, take: Int, where: ShopWhereInput): Shop
  findFirstSystemData(cursor: SystemDataWhereUniqueInput, distinct: [SystemDataScalarFieldEnum!], orderBy: [SystemDataOrderByWithRelationInput!], skip: Int, take: Int, where: SystemDataWhereInput): SystemData
  findFirstUser(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): User
  findManySystemData(cursor: SystemDataWhereUniqueInput, distinct: [SystemDataScalarFieldEnum!], orderBy: [SystemDataOrderByWithRelationInput!], skip: Int, take: Int, where: SystemDataWhereInput): [SystemData!]!
  findUniqueSystemData(where: SystemDataWhereUniqueInput!): SystemData
  greet: String!
  groupByInstallmentRecord(by: [InstallmentRecordScalarFieldEnum!]!, having: InstallmentRecordScalarWhereWithAggregatesInput, orderBy: [InstallmentRecordOrderByWithAggregationInput!], skip: Int, take: Int, where: InstallmentRecordWhereInput): [InstallmentRecordGroupBy!]!
  groupByItem(by: [ItemScalarFieldEnum!]!, having: ItemScalarWhereWithAggregatesInput, orderBy: [ItemOrderByWithAggregationInput!], skip: Int, take: Int, where: ItemWhereInput): [ItemGroupBy!]!
  groupBySaleRecord(by: [SaleRecordScalarFieldEnum!]!, having: SaleRecordScalarWhereWithAggregatesInput, orderBy: [SaleRecordOrderByWithAggregationInput!], skip: Int, take: Int, where: SaleRecordWhereInput): [SaleRecordGroupBy!]!
  groupByShop(by: [ShopScalarFieldEnum!]!, having: ShopScalarWhereWithAggregatesInput, orderBy: [ShopOrderByWithAggregationInput!], skip: Int, take: Int, where: ShopWhereInput): [ShopGroupBy!]!
  groupBySystemData(by: [SystemDataScalarFieldEnum!]!, having: SystemDataScalarWhereWithAggregatesInput, orderBy: [SystemDataOrderByWithAggregationInput!], skip: Int, take: Int, where: SystemDataWhereInput): [SystemDataGroupBy!]!
  groupByUser(by: [UserScalarFieldEnum!]!, having: UserScalarWhereWithAggregatesInput, orderBy: [UserOrderByWithAggregationInput!], skip: Int, take: Int, where: UserWhereInput): [UserGroupBy!]!
  installmentRecord(where: InstallmentRecordWhereUniqueInput!): InstallmentRecord
  installmentRecords(cursor: InstallmentRecordWhereUniqueInput, distinct: [InstallmentRecordScalarFieldEnum!], orderBy: [InstallmentRecordOrderByWithRelationInput!], skip: Int, take: Int, where: InstallmentRecordWhereInput): [InstallmentRecord!]!
  item(where: ItemWhereUniqueInput!): Item
  items(cursor: ItemWhereUniqueInput, distinct: [ItemScalarFieldEnum!], orderBy: [ItemOrderByWithRelationInput!], skip: Int, take: Int, where: ItemWhereInput): [Item!]!
  saleRecord(where: SaleRecordWhereUniqueInput!): SaleRecord
  saleRecords(cursor: SaleRecordWhereUniqueInput, distinct: [SaleRecordScalarFieldEnum!], orderBy: [SaleRecordOrderByWithRelationInput!], skip: Int, take: Int, where: SaleRecordWhereInput): [SaleRecord!]!
  shop(where: ShopWhereUniqueInput!): Shop
  shops(cursor: ShopWhereUniqueInput, distinct: [ShopScalarFieldEnum!], orderBy: [ShopOrderByWithRelationInput!], skip: Int, take: Int, where: ShopWhereInput): [Shop!]!
  user(where: UserWhereUniqueInput!): User
  users(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): [User!]!
}

enum Role {
  ADMIN
  ENTRY_OPERATOR
  EXIT_OPERATOR
  SUPERVISOR
}

type SaleRecord {
  _count: SaleRecordCount!
  address: String
  created_at: DateTime!
  customer: String!
  customer_type: Int
  father_name: String
  give_amount: Int
  id: String!
  installment_amount: Int
  installment_at: DateTime
  installment_records(cursor: InstallmentRecordWhereUniqueInput, distinct: [InstallmentRecordScalarFieldEnum!], orderBy: [InstallmentRecordOrderByWithRelationInput!], skip: Int, take: Int, where: InstallmentRecordWhereInput): [InstallmentRecord!]!
  metadata: String
  net_amount: Int
  particular: String
  phone: String
  price: Int
  product_status: ProductStatus!
  qty: Int
  referral: String
  referral_phone: String
  shop: Shop!
  shop_id: String!
  total_amount: Int!
  updated_at: DateTime!
  user: User
  user_id: String
  user_name: String
  voucher_no: String!
}

type SaleRecordAvgAggregate {
  customer_type: Float
  give_amount: Float
  installment_amount: Float
  net_amount: Float
  price: Float
  qty: Float
  total_amount: Float
}

input SaleRecordAvgOrderByAggregateInput {
  customer_type: SortOrder
  give_amount: SortOrder
  installment_amount: SortOrder
  net_amount: SortOrder
  price: SortOrder
  qty: SortOrder
  total_amount: SortOrder
}

type SaleRecordCount {
  installment_records: Int!
}

type SaleRecordCountAggregate {
  _all: Int!
  address: Int!
  created_at: Int!
  customer: Int!
  customer_type: Int!
  father_name: Int!
  give_amount: Int!
  id: Int!
  installment_amount: Int!
  installment_at: Int!
  metadata: Int!
  net_amount: Int!
  particular: Int!
  phone: Int!
  price: Int!
  product_status: Int!
  qty: Int!
  referral: Int!
  referral_phone: Int!
  shop_id: Int!
  total_amount: Int!
  updated_at: Int!
  user_id: Int!
  user_name: Int!
  voucher_no: Int!
}

input SaleRecordCountOrderByAggregateInput {
  address: SortOrder
  created_at: SortOrder
  customer: SortOrder
  customer_type: SortOrder
  father_name: SortOrder
  give_amount: SortOrder
  id: SortOrder
  installment_amount: SortOrder
  installment_at: SortOrder
  metadata: SortOrder
  net_amount: SortOrder
  particular: SortOrder
  phone: SortOrder
  price: SortOrder
  product_status: SortOrder
  qty: SortOrder
  referral: SortOrder
  referral_phone: SortOrder
  shop_id: SortOrder
  total_amount: SortOrder
  updated_at: SortOrder
  user_id: SortOrder
  user_name: SortOrder
  voucher_no: SortOrder
}

input SaleRecordCreateInput {
  address: String
  created_at: DateTime
  customer: String!
  customer_type: Int
  father_name: String
  give_amount: Int
  id: String
  installment_amount: Int
  installment_at: DateTime
  installment_records: InstallmentRecordCreateNestedManyWithoutCustomerInput
  metadata: String
  net_amount: Int
  particular: String
  phone: String
  price: Int
  product_status: ProductStatus
  qty: Int
  referral: String
  referral_phone: String
  shop: ShopCreateNestedOneWithoutSale_recordsInput!
  total_amount: Int!
  updated_at: DateTime
  user: UserCreateNestedOneWithoutSale_recordsInput
  user_name: String
  voucher_no: String!
}

input SaleRecordCreateManyInput {
  address: String
  created_at: DateTime
  customer: String!
  customer_type: Int
  father_name: String
  give_amount: Int
  id: String
  installment_amount: Int
  installment_at: DateTime
  metadata: String
  net_amount: Int
  particular: String
  phone: String
  price: Int
  product_status: ProductStatus
  qty: Int
  referral: String
  referral_phone: String
  shop_id: String!
  total_amount: Int!
  updated_at: DateTime
  user_id: String
  user_name: String
  voucher_no: String!
}

input SaleRecordCreateManyShopInput {
  address: String
  created_at: DateTime
  customer: String!
  customer_type: Int
  father_name: String
  give_amount: Int
  id: String
  installment_amount: Int
  installment_at: DateTime
  metadata: String
  net_amount: Int
  particular: String
  phone: String
  price: Int
  product_status: ProductStatus
  qty: Int
  referral: String
  referral_phone: String
  total_amount: Int!
  updated_at: DateTime
  user_id: String
  user_name: String
  voucher_no: String!
}

input SaleRecordCreateManyShopInputEnvelope {
  data: [SaleRecordCreateManyShopInput!]!
  skipDuplicates: Boolean
}

input SaleRecordCreateManyUserInput {
  address: String
  created_at: DateTime
  customer: String!
  customer_type: Int
  father_name: String
  give_amount: Int
  id: String
  installment_amount: Int
  installment_at: DateTime
  metadata: String
  net_amount: Int
  particular: String
  phone: String
  price: Int
  product_status: ProductStatus
  qty: Int
  referral: String
  referral_phone: String
  shop_id: String!
  total_amount: Int!
  updated_at: DateTime
  user_name: String
  voucher_no: String!
}

input SaleRecordCreateManyUserInputEnvelope {
  data: [SaleRecordCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input SaleRecordCreateNestedManyWithoutShopInput {
  connect: [SaleRecordWhereUniqueInput!]
  connectOrCreate: [SaleRecordCreateOrConnectWithoutShopInput!]
  create: [SaleRecordCreateWithoutShopInput!]
  createMany: SaleRecordCreateManyShopInputEnvelope
}

input SaleRecordCreateNestedManyWithoutUserInput {
  connect: [SaleRecordWhereUniqueInput!]
  connectOrCreate: [SaleRecordCreateOrConnectWithoutUserInput!]
  create: [SaleRecordCreateWithoutUserInput!]
  createMany: SaleRecordCreateManyUserInputEnvelope
}

input SaleRecordCreateNestedOneWithoutInstallment_recordsInput {
  connect: SaleRecordWhereUniqueInput
  connectOrCreate: SaleRecordCreateOrConnectWithoutInstallment_recordsInput
  create: SaleRecordCreateWithoutInstallment_recordsInput
}

input SaleRecordCreateOrConnectWithoutInstallment_recordsInput {
  create: SaleRecordCreateWithoutInstallment_recordsInput!
  where: SaleRecordWhereUniqueInput!
}

input SaleRecordCreateOrConnectWithoutShopInput {
  create: SaleRecordCreateWithoutShopInput!
  where: SaleRecordWhereUniqueInput!
}

input SaleRecordCreateOrConnectWithoutUserInput {
  create: SaleRecordCreateWithoutUserInput!
  where: SaleRecordWhereUniqueInput!
}

input SaleRecordCreateWithoutInstallment_recordsInput {
  address: String
  created_at: DateTime
  customer: String!
  customer_type: Int
  father_name: String
  give_amount: Int
  id: String
  installment_amount: Int
  installment_at: DateTime
  metadata: String
  net_amount: Int
  particular: String
  phone: String
  price: Int
  product_status: ProductStatus
  qty: Int
  referral: String
  referral_phone: String
  shop: ShopCreateNestedOneWithoutSale_recordsInput!
  total_amount: Int!
  updated_at: DateTime
  user: UserCreateNestedOneWithoutSale_recordsInput
  user_name: String
  voucher_no: String!
}

input SaleRecordCreateWithoutShopInput {
  address: String
  created_at: DateTime
  customer: String!
  customer_type: Int
  father_name: String
  give_amount: Int
  id: String
  installment_amount: Int
  installment_at: DateTime
  installment_records: InstallmentRecordCreateNestedManyWithoutCustomerInput
  metadata: String
  net_amount: Int
  particular: String
  phone: String
  price: Int
  product_status: ProductStatus
  qty: Int
  referral: String
  referral_phone: String
  total_amount: Int!
  updated_at: DateTime
  user: UserCreateNestedOneWithoutSale_recordsInput
  user_name: String
  voucher_no: String!
}

input SaleRecordCreateWithoutUserInput {
  address: String
  created_at: DateTime
  customer: String!
  customer_type: Int
  father_name: String
  give_amount: Int
  id: String
  installment_amount: Int
  installment_at: DateTime
  installment_records: InstallmentRecordCreateNestedManyWithoutCustomerInput
  metadata: String
  net_amount: Int
  particular: String
  phone: String
  price: Int
  product_status: ProductStatus
  qty: Int
  referral: String
  referral_phone: String
  shop: ShopCreateNestedOneWithoutSale_recordsInput!
  total_amount: Int!
  updated_at: DateTime
  user_name: String
  voucher_no: String!
}

type SaleRecordGroupBy {
  _avg: SaleRecordAvgAggregate
  _count: SaleRecordCountAggregate
  _max: SaleRecordMaxAggregate
  _min: SaleRecordMinAggregate
  _sum: SaleRecordSumAggregate
  address: String
  created_at: DateTime!
  customer: String!
  customer_type: Int
  father_name: String
  give_amount: Int
  id: String!
  installment_amount: Int
  installment_at: DateTime
  metadata: String
  net_amount: Int
  particular: String
  phone: String
  price: Int
  product_status: ProductStatus!
  qty: Int
  referral: String
  referral_phone: String
  shop_id: String!
  total_amount: Int!
  updated_at: DateTime!
  user_id: String
  user_name: String
  voucher_no: String!
}

input SaleRecordListRelationFilter {
  every: SaleRecordWhereInput
  none: SaleRecordWhereInput
  some: SaleRecordWhereInput
}

type SaleRecordMaxAggregate {
  address: String
  created_at: DateTime
  customer: String
  customer_type: Int
  father_name: String
  give_amount: Int
  id: String
  installment_amount: Int
  installment_at: DateTime
  metadata: String
  net_amount: Int
  particular: String
  phone: String
  price: Int
  product_status: ProductStatus
  qty: Int
  referral: String
  referral_phone: String
  shop_id: String
  total_amount: Int
  updated_at: DateTime
  user_id: String
  user_name: String
  voucher_no: String
}

input SaleRecordMaxOrderByAggregateInput {
  address: SortOrder
  created_at: SortOrder
  customer: SortOrder
  customer_type: SortOrder
  father_name: SortOrder
  give_amount: SortOrder
  id: SortOrder
  installment_amount: SortOrder
  installment_at: SortOrder
  metadata: SortOrder
  net_amount: SortOrder
  particular: SortOrder
  phone: SortOrder
  price: SortOrder
  product_status: SortOrder
  qty: SortOrder
  referral: SortOrder
  referral_phone: SortOrder
  shop_id: SortOrder
  total_amount: SortOrder
  updated_at: SortOrder
  user_id: SortOrder
  user_name: SortOrder
  voucher_no: SortOrder
}

type SaleRecordMinAggregate {
  address: String
  created_at: DateTime
  customer: String
  customer_type: Int
  father_name: String
  give_amount: Int
  id: String
  installment_amount: Int
  installment_at: DateTime
  metadata: String
  net_amount: Int
  particular: String
  phone: String
  price: Int
  product_status: ProductStatus
  qty: Int
  referral: String
  referral_phone: String
  shop_id: String
  total_amount: Int
  updated_at: DateTime
  user_id: String
  user_name: String
  voucher_no: String
}

input SaleRecordMinOrderByAggregateInput {
  address: SortOrder
  created_at: SortOrder
  customer: SortOrder
  customer_type: SortOrder
  father_name: SortOrder
  give_amount: SortOrder
  id: SortOrder
  installment_amount: SortOrder
  installment_at: SortOrder
  metadata: SortOrder
  net_amount: SortOrder
  particular: SortOrder
  phone: SortOrder
  price: SortOrder
  product_status: SortOrder
  qty: SortOrder
  referral: SortOrder
  referral_phone: SortOrder
  shop_id: SortOrder
  total_amount: SortOrder
  updated_at: SortOrder
  user_id: SortOrder
  user_name: SortOrder
  voucher_no: SortOrder
}

input SaleRecordOrderByRelationAggregateInput {
  _count: SortOrder
}

input SaleRecordOrderByWithAggregationInput {
  _avg: SaleRecordAvgOrderByAggregateInput
  _count: SaleRecordCountOrderByAggregateInput
  _max: SaleRecordMaxOrderByAggregateInput
  _min: SaleRecordMinOrderByAggregateInput
  _sum: SaleRecordSumOrderByAggregateInput
  address: SortOrder
  created_at: SortOrder
  customer: SortOrder
  customer_type: SortOrder
  father_name: SortOrder
  give_amount: SortOrder
  id: SortOrder
  installment_amount: SortOrder
  installment_at: SortOrder
  metadata: SortOrder
  net_amount: SortOrder
  particular: SortOrder
  phone: SortOrder
  price: SortOrder
  product_status: SortOrder
  qty: SortOrder
  referral: SortOrder
  referral_phone: SortOrder
  shop_id: SortOrder
  total_amount: SortOrder
  updated_at: SortOrder
  user_id: SortOrder
  user_name: SortOrder
  voucher_no: SortOrder
}

input SaleRecordOrderByWithRelationInput {
  address: SortOrder
  created_at: SortOrder
  customer: SortOrder
  customer_type: SortOrder
  father_name: SortOrder
  give_amount: SortOrder
  id: SortOrder
  installment_amount: SortOrder
  installment_at: SortOrder
  installment_records: InstallmentRecordOrderByRelationAggregateInput
  metadata: SortOrder
  net_amount: SortOrder
  particular: SortOrder
  phone: SortOrder
  price: SortOrder
  product_status: SortOrder
  qty: SortOrder
  referral: SortOrder
  referral_phone: SortOrder
  shop: ShopOrderByWithRelationInput
  shop_id: SortOrder
  total_amount: SortOrder
  updated_at: SortOrder
  user: UserOrderByWithRelationInput
  user_id: SortOrder
  user_name: SortOrder
  voucher_no: SortOrder
}

input SaleRecordRelationFilter {
  is: SaleRecordWhereInput
  isNot: SaleRecordWhereInput
}

enum SaleRecordScalarFieldEnum {
  address
  created_at
  customer
  customer_type
  father_name
  give_amount
  id
  installment_amount
  installment_at
  metadata
  net_amount
  particular
  phone
  price
  product_status
  qty
  referral
  referral_phone
  shop_id
  total_amount
  updated_at
  user_id
  user_name
  voucher_no
}

input SaleRecordScalarWhereInput {
  AND: [SaleRecordScalarWhereInput!]
  NOT: [SaleRecordScalarWhereInput!]
  OR: [SaleRecordScalarWhereInput!]
  address: StringNullableFilter
  created_at: DateTimeFilter
  customer: StringFilter
  customer_type: IntNullableFilter
  father_name: StringNullableFilter
  give_amount: IntNullableFilter
  id: StringFilter
  installment_amount: IntNullableFilter
  installment_at: DateTimeNullableFilter
  metadata: StringNullableFilter
  net_amount: IntNullableFilter
  particular: StringNullableFilter
  phone: StringNullableFilter
  price: IntNullableFilter
  product_status: EnumProductStatusFilter
  qty: IntNullableFilter
  referral: StringNullableFilter
  referral_phone: StringNullableFilter
  shop_id: StringFilter
  total_amount: IntFilter
  updated_at: DateTimeFilter
  user_id: StringNullableFilter
  user_name: StringNullableFilter
  voucher_no: StringFilter
}

input SaleRecordScalarWhereWithAggregatesInput {
  AND: [SaleRecordScalarWhereWithAggregatesInput!]
  NOT: [SaleRecordScalarWhereWithAggregatesInput!]
  OR: [SaleRecordScalarWhereWithAggregatesInput!]
  address: StringNullableWithAggregatesFilter
  created_at: DateTimeWithAggregatesFilter
  customer: StringWithAggregatesFilter
  customer_type: IntNullableWithAggregatesFilter
  father_name: StringNullableWithAggregatesFilter
  give_amount: IntNullableWithAggregatesFilter
  id: StringWithAggregatesFilter
  installment_amount: IntNullableWithAggregatesFilter
  installment_at: DateTimeNullableWithAggregatesFilter
  metadata: StringNullableWithAggregatesFilter
  net_amount: IntNullableWithAggregatesFilter
  particular: StringNullableWithAggregatesFilter
  phone: StringNullableWithAggregatesFilter
  price: IntNullableWithAggregatesFilter
  product_status: EnumProductStatusWithAggregatesFilter
  qty: IntNullableWithAggregatesFilter
  referral: StringNullableWithAggregatesFilter
  referral_phone: StringNullableWithAggregatesFilter
  shop_id: StringWithAggregatesFilter
  total_amount: IntWithAggregatesFilter
  updated_at: DateTimeWithAggregatesFilter
  user_id: StringNullableWithAggregatesFilter
  user_name: StringNullableWithAggregatesFilter
  voucher_no: StringWithAggregatesFilter
}

type SaleRecordSumAggregate {
  customer_type: Int
  give_amount: Int
  installment_amount: Int
  net_amount: Int
  price: Int
  qty: Int
  total_amount: Int
}

input SaleRecordSumOrderByAggregateInput {
  customer_type: SortOrder
  give_amount: SortOrder
  installment_amount: SortOrder
  net_amount: SortOrder
  price: SortOrder
  qty: SortOrder
  total_amount: SortOrder
}

input SaleRecordUpdateInput {
  address: NullableStringFieldUpdateOperationsInput
  created_at: DateTimeFieldUpdateOperationsInput
  customer: StringFieldUpdateOperationsInput
  customer_type: NullableIntFieldUpdateOperationsInput
  father_name: NullableStringFieldUpdateOperationsInput
  give_amount: NullableIntFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  installment_amount: NullableIntFieldUpdateOperationsInput
  installment_at: NullableDateTimeFieldUpdateOperationsInput
  installment_records: InstallmentRecordUpdateManyWithoutCustomerInput
  metadata: NullableStringFieldUpdateOperationsInput
  net_amount: NullableIntFieldUpdateOperationsInput
  particular: NullableStringFieldUpdateOperationsInput
  phone: NullableStringFieldUpdateOperationsInput
  price: NullableIntFieldUpdateOperationsInput
  product_status: EnumProductStatusFieldUpdateOperationsInput
  qty: NullableIntFieldUpdateOperationsInput
  referral: NullableStringFieldUpdateOperationsInput
  referral_phone: NullableStringFieldUpdateOperationsInput
  shop: ShopUpdateOneRequiredWithoutSale_recordsInput
  total_amount: IntFieldUpdateOperationsInput
  updated_at: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneWithoutSale_recordsInput
  user_name: NullableStringFieldUpdateOperationsInput
  voucher_no: StringFieldUpdateOperationsInput
}

input SaleRecordUpdateManyMutationInput {
  address: NullableStringFieldUpdateOperationsInput
  created_at: DateTimeFieldUpdateOperationsInput
  customer: StringFieldUpdateOperationsInput
  customer_type: NullableIntFieldUpdateOperationsInput
  father_name: NullableStringFieldUpdateOperationsInput
  give_amount: NullableIntFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  installment_amount: NullableIntFieldUpdateOperationsInput
  installment_at: NullableDateTimeFieldUpdateOperationsInput
  metadata: NullableStringFieldUpdateOperationsInput
  net_amount: NullableIntFieldUpdateOperationsInput
  particular: NullableStringFieldUpdateOperationsInput
  phone: NullableStringFieldUpdateOperationsInput
  price: NullableIntFieldUpdateOperationsInput
  product_status: EnumProductStatusFieldUpdateOperationsInput
  qty: NullableIntFieldUpdateOperationsInput
  referral: NullableStringFieldUpdateOperationsInput
  referral_phone: NullableStringFieldUpdateOperationsInput
  total_amount: IntFieldUpdateOperationsInput
  updated_at: DateTimeFieldUpdateOperationsInput
  user_name: NullableStringFieldUpdateOperationsInput
  voucher_no: StringFieldUpdateOperationsInput
}

input SaleRecordUpdateManyWithWhereWithoutShopInput {
  data: SaleRecordUpdateManyMutationInput!
  where: SaleRecordScalarWhereInput!
}

input SaleRecordUpdateManyWithWhereWithoutUserInput {
  data: SaleRecordUpdateManyMutationInput!
  where: SaleRecordScalarWhereInput!
}

input SaleRecordUpdateManyWithoutShopInput {
  connect: [SaleRecordWhereUniqueInput!]
  connectOrCreate: [SaleRecordCreateOrConnectWithoutShopInput!]
  create: [SaleRecordCreateWithoutShopInput!]
  createMany: SaleRecordCreateManyShopInputEnvelope
  delete: [SaleRecordWhereUniqueInput!]
  deleteMany: [SaleRecordScalarWhereInput!]
  disconnect: [SaleRecordWhereUniqueInput!]
  set: [SaleRecordWhereUniqueInput!]
  update: [SaleRecordUpdateWithWhereUniqueWithoutShopInput!]
  updateMany: [SaleRecordUpdateManyWithWhereWithoutShopInput!]
  upsert: [SaleRecordUpsertWithWhereUniqueWithoutShopInput!]
}

input SaleRecordUpdateManyWithoutUserInput {
  connect: [SaleRecordWhereUniqueInput!]
  connectOrCreate: [SaleRecordCreateOrConnectWithoutUserInput!]
  create: [SaleRecordCreateWithoutUserInput!]
  createMany: SaleRecordCreateManyUserInputEnvelope
  delete: [SaleRecordWhereUniqueInput!]
  deleteMany: [SaleRecordScalarWhereInput!]
  disconnect: [SaleRecordWhereUniqueInput!]
  set: [SaleRecordWhereUniqueInput!]
  update: [SaleRecordUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [SaleRecordUpdateManyWithWhereWithoutUserInput!]
  upsert: [SaleRecordUpsertWithWhereUniqueWithoutUserInput!]
}

input SaleRecordUpdateOneWithoutInstallment_recordsInput {
  connect: SaleRecordWhereUniqueInput
  connectOrCreate: SaleRecordCreateOrConnectWithoutInstallment_recordsInput
  create: SaleRecordCreateWithoutInstallment_recordsInput
  delete: Boolean
  disconnect: Boolean
  update: SaleRecordUpdateWithoutInstallment_recordsInput
  upsert: SaleRecordUpsertWithoutInstallment_recordsInput
}

input SaleRecordUpdateWithWhereUniqueWithoutShopInput {
  data: SaleRecordUpdateWithoutShopInput!
  where: SaleRecordWhereUniqueInput!
}

input SaleRecordUpdateWithWhereUniqueWithoutUserInput {
  data: SaleRecordUpdateWithoutUserInput!
  where: SaleRecordWhereUniqueInput!
}

input SaleRecordUpdateWithoutInstallment_recordsInput {
  address: NullableStringFieldUpdateOperationsInput
  created_at: DateTimeFieldUpdateOperationsInput
  customer: StringFieldUpdateOperationsInput
  customer_type: NullableIntFieldUpdateOperationsInput
  father_name: NullableStringFieldUpdateOperationsInput
  give_amount: NullableIntFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  installment_amount: NullableIntFieldUpdateOperationsInput
  installment_at: NullableDateTimeFieldUpdateOperationsInput
  metadata: NullableStringFieldUpdateOperationsInput
  net_amount: NullableIntFieldUpdateOperationsInput
  particular: NullableStringFieldUpdateOperationsInput
  phone: NullableStringFieldUpdateOperationsInput
  price: NullableIntFieldUpdateOperationsInput
  product_status: EnumProductStatusFieldUpdateOperationsInput
  qty: NullableIntFieldUpdateOperationsInput
  referral: NullableStringFieldUpdateOperationsInput
  referral_phone: NullableStringFieldUpdateOperationsInput
  shop: ShopUpdateOneRequiredWithoutSale_recordsInput
  total_amount: IntFieldUpdateOperationsInput
  updated_at: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneWithoutSale_recordsInput
  user_name: NullableStringFieldUpdateOperationsInput
  voucher_no: StringFieldUpdateOperationsInput
}

input SaleRecordUpdateWithoutShopInput {
  address: NullableStringFieldUpdateOperationsInput
  created_at: DateTimeFieldUpdateOperationsInput
  customer: StringFieldUpdateOperationsInput
  customer_type: NullableIntFieldUpdateOperationsInput
  father_name: NullableStringFieldUpdateOperationsInput
  give_amount: NullableIntFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  installment_amount: NullableIntFieldUpdateOperationsInput
  installment_at: NullableDateTimeFieldUpdateOperationsInput
  installment_records: InstallmentRecordUpdateManyWithoutCustomerInput
  metadata: NullableStringFieldUpdateOperationsInput
  net_amount: NullableIntFieldUpdateOperationsInput
  particular: NullableStringFieldUpdateOperationsInput
  phone: NullableStringFieldUpdateOperationsInput
  price: NullableIntFieldUpdateOperationsInput
  product_status: EnumProductStatusFieldUpdateOperationsInput
  qty: NullableIntFieldUpdateOperationsInput
  referral: NullableStringFieldUpdateOperationsInput
  referral_phone: NullableStringFieldUpdateOperationsInput
  total_amount: IntFieldUpdateOperationsInput
  updated_at: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneWithoutSale_recordsInput
  user_name: NullableStringFieldUpdateOperationsInput
  voucher_no: StringFieldUpdateOperationsInput
}

input SaleRecordUpdateWithoutUserInput {
  address: NullableStringFieldUpdateOperationsInput
  created_at: DateTimeFieldUpdateOperationsInput
  customer: StringFieldUpdateOperationsInput
  customer_type: NullableIntFieldUpdateOperationsInput
  father_name: NullableStringFieldUpdateOperationsInput
  give_amount: NullableIntFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  installment_amount: NullableIntFieldUpdateOperationsInput
  installment_at: NullableDateTimeFieldUpdateOperationsInput
  installment_records: InstallmentRecordUpdateManyWithoutCustomerInput
  metadata: NullableStringFieldUpdateOperationsInput
  net_amount: NullableIntFieldUpdateOperationsInput
  particular: NullableStringFieldUpdateOperationsInput
  phone: NullableStringFieldUpdateOperationsInput
  price: NullableIntFieldUpdateOperationsInput
  product_status: EnumProductStatusFieldUpdateOperationsInput
  qty: NullableIntFieldUpdateOperationsInput
  referral: NullableStringFieldUpdateOperationsInput
  referral_phone: NullableStringFieldUpdateOperationsInput
  shop: ShopUpdateOneRequiredWithoutSale_recordsInput
  total_amount: IntFieldUpdateOperationsInput
  updated_at: DateTimeFieldUpdateOperationsInput
  user_name: NullableStringFieldUpdateOperationsInput
  voucher_no: StringFieldUpdateOperationsInput
}

input SaleRecordUpsertWithWhereUniqueWithoutShopInput {
  create: SaleRecordCreateWithoutShopInput!
  update: SaleRecordUpdateWithoutShopInput!
  where: SaleRecordWhereUniqueInput!
}

input SaleRecordUpsertWithWhereUniqueWithoutUserInput {
  create: SaleRecordCreateWithoutUserInput!
  update: SaleRecordUpdateWithoutUserInput!
  where: SaleRecordWhereUniqueInput!
}

input SaleRecordUpsertWithoutInstallment_recordsInput {
  create: SaleRecordCreateWithoutInstallment_recordsInput!
  update: SaleRecordUpdateWithoutInstallment_recordsInput!
}

input SaleRecordWhereInput {
  AND: [SaleRecordWhereInput!]
  NOT: [SaleRecordWhereInput!]
  OR: [SaleRecordWhereInput!]
  address: StringNullableFilter
  created_at: DateTimeFilter
  customer: StringFilter
  customer_type: IntNullableFilter
  father_name: StringNullableFilter
  give_amount: IntNullableFilter
  id: StringFilter
  installment_amount: IntNullableFilter
  installment_at: DateTimeNullableFilter
  installment_records: InstallmentRecordListRelationFilter
  metadata: StringNullableFilter
  net_amount: IntNullableFilter
  particular: StringNullableFilter
  phone: StringNullableFilter
  price: IntNullableFilter
  product_status: EnumProductStatusFilter
  qty: IntNullableFilter
  referral: StringNullableFilter
  referral_phone: StringNullableFilter
  shop: ShopRelationFilter
  shop_id: StringFilter
  total_amount: IntFilter
  updated_at: DateTimeFilter
  user: UserRelationFilter
  user_id: StringNullableFilter
  user_name: StringNullableFilter
  voucher_no: StringFilter
}

input SaleRecordWhereUniqueInput {
  id: String
}

type Shop {
  _count: ShopCount!
  created_at: DateTime!
  id: String!
  name: String!
  sale_records(cursor: SaleRecordWhereUniqueInput, distinct: [SaleRecordScalarFieldEnum!], orderBy: [SaleRecordOrderByWithRelationInput!], skip: Int, take: Int, where: SaleRecordWhereInput): [SaleRecord!]!
  updated_at: DateTime!
}

type ShopCount {
  sale_records: Int!
}

type ShopCountAggregate {
  _all: Int!
  created_at: Int!
  id: Int!
  name: Int!
  updated_at: Int!
}

input ShopCountOrderByAggregateInput {
  created_at: SortOrder
  id: SortOrder
  name: SortOrder
  updated_at: SortOrder
}

input ShopCreateInput {
  created_at: DateTime
  id: String
  name: String!
  sale_records: SaleRecordCreateNestedManyWithoutShopInput
  updated_at: DateTime
}

input ShopCreateManyInput {
  created_at: DateTime
  id: String
  name: String!
  updated_at: DateTime
}

input ShopCreateNestedOneWithoutSale_recordsInput {
  connect: ShopWhereUniqueInput
  connectOrCreate: ShopCreateOrConnectWithoutSale_recordsInput
  create: ShopCreateWithoutSale_recordsInput
}

input ShopCreateOrConnectWithoutSale_recordsInput {
  create: ShopCreateWithoutSale_recordsInput!
  where: ShopWhereUniqueInput!
}

input ShopCreateWithoutSale_recordsInput {
  created_at: DateTime
  id: String
  name: String!
  updated_at: DateTime
}

type ShopGroupBy {
  _count: ShopCountAggregate
  _max: ShopMaxAggregate
  _min: ShopMinAggregate
  created_at: DateTime!
  id: String!
  name: String!
  updated_at: DateTime!
}

type ShopMaxAggregate {
  created_at: DateTime
  id: String
  name: String
  updated_at: DateTime
}

input ShopMaxOrderByAggregateInput {
  created_at: SortOrder
  id: SortOrder
  name: SortOrder
  updated_at: SortOrder
}

type ShopMinAggregate {
  created_at: DateTime
  id: String
  name: String
  updated_at: DateTime
}

input ShopMinOrderByAggregateInput {
  created_at: SortOrder
  id: SortOrder
  name: SortOrder
  updated_at: SortOrder
}

input ShopOrderByWithAggregationInput {
  _count: ShopCountOrderByAggregateInput
  _max: ShopMaxOrderByAggregateInput
  _min: ShopMinOrderByAggregateInput
  created_at: SortOrder
  id: SortOrder
  name: SortOrder
  updated_at: SortOrder
}

input ShopOrderByWithRelationInput {
  created_at: SortOrder
  id: SortOrder
  name: SortOrder
  sale_records: SaleRecordOrderByRelationAggregateInput
  updated_at: SortOrder
}

input ShopRelationFilter {
  is: ShopWhereInput
  isNot: ShopWhereInput
}

enum ShopScalarFieldEnum {
  created_at
  id
  name
  updated_at
}

input ShopScalarWhereWithAggregatesInput {
  AND: [ShopScalarWhereWithAggregatesInput!]
  NOT: [ShopScalarWhereWithAggregatesInput!]
  OR: [ShopScalarWhereWithAggregatesInput!]
  created_at: DateTimeWithAggregatesFilter
  id: StringWithAggregatesFilter
  name: StringWithAggregatesFilter
  updated_at: DateTimeWithAggregatesFilter
}

input ShopUpdateInput {
  created_at: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  sale_records: SaleRecordUpdateManyWithoutShopInput
  updated_at: DateTimeFieldUpdateOperationsInput
}

input ShopUpdateManyMutationInput {
  created_at: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updated_at: DateTimeFieldUpdateOperationsInput
}

input ShopUpdateOneRequiredWithoutSale_recordsInput {
  connect: ShopWhereUniqueInput
  connectOrCreate: ShopCreateOrConnectWithoutSale_recordsInput
  create: ShopCreateWithoutSale_recordsInput
  update: ShopUpdateWithoutSale_recordsInput
  upsert: ShopUpsertWithoutSale_recordsInput
}

input ShopUpdateWithoutSale_recordsInput {
  created_at: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updated_at: DateTimeFieldUpdateOperationsInput
}

input ShopUpsertWithoutSale_recordsInput {
  create: ShopCreateWithoutSale_recordsInput!
  update: ShopUpdateWithoutSale_recordsInput!
}

input ShopWhereInput {
  AND: [ShopWhereInput!]
  NOT: [ShopWhereInput!]
  OR: [ShopWhereInput!]
  created_at: DateTimeFilter
  id: StringFilter
  name: StringFilter
  sale_records: SaleRecordListRelationFilter
  updated_at: DateTimeFilter
}

input ShopWhereUniqueInput {
  id: String
}

type SignInResponse {
  accessToken: String!
  user: User!
}

enum SortOrder {
  asc
  desc
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedStringNullableFilter
  _min: NestedStringNullableFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

input StringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

type SystemData {
  code: String!
  created_at: DateTime!
  description: String
  id: String!
  metadata: String
  updated_at: DateTime!
  value: String
}

type SystemDataCountAggregate {
  _all: Int!
  code: Int!
  created_at: Int!
  description: Int!
  id: Int!
  metadata: Int!
  updated_at: Int!
  value: Int!
}

input SystemDataCountOrderByAggregateInput {
  code: SortOrder
  created_at: SortOrder
  description: SortOrder
  id: SortOrder
  metadata: SortOrder
  updated_at: SortOrder
  value: SortOrder
}

input SystemDataCreateInput {
  code: String!
  created_at: DateTime
  description: String
  id: String
  metadata: String
  updated_at: DateTime
  value: String
}

input SystemDataCreateManyInput {
  code: String!
  created_at: DateTime
  description: String
  id: String
  metadata: String
  updated_at: DateTime
  value: String
}

type SystemDataGroupBy {
  _count: SystemDataCountAggregate
  _max: SystemDataMaxAggregate
  _min: SystemDataMinAggregate
  code: String!
  created_at: DateTime!
  description: String
  id: String!
  metadata: String
  updated_at: DateTime!
  value: String
}

type SystemDataMaxAggregate {
  code: String
  created_at: DateTime
  description: String
  id: String
  metadata: String
  updated_at: DateTime
  value: String
}

input SystemDataMaxOrderByAggregateInput {
  code: SortOrder
  created_at: SortOrder
  description: SortOrder
  id: SortOrder
  metadata: SortOrder
  updated_at: SortOrder
  value: SortOrder
}

type SystemDataMinAggregate {
  code: String
  created_at: DateTime
  description: String
  id: String
  metadata: String
  updated_at: DateTime
  value: String
}

input SystemDataMinOrderByAggregateInput {
  code: SortOrder
  created_at: SortOrder
  description: SortOrder
  id: SortOrder
  metadata: SortOrder
  updated_at: SortOrder
  value: SortOrder
}

input SystemDataOrderByWithAggregationInput {
  _count: SystemDataCountOrderByAggregateInput
  _max: SystemDataMaxOrderByAggregateInput
  _min: SystemDataMinOrderByAggregateInput
  code: SortOrder
  created_at: SortOrder
  description: SortOrder
  id: SortOrder
  metadata: SortOrder
  updated_at: SortOrder
  value: SortOrder
}

input SystemDataOrderByWithRelationInput {
  code: SortOrder
  created_at: SortOrder
  description: SortOrder
  id: SortOrder
  metadata: SortOrder
  updated_at: SortOrder
  value: SortOrder
}

enum SystemDataScalarFieldEnum {
  code
  created_at
  description
  id
  metadata
  updated_at
  value
}

input SystemDataScalarWhereWithAggregatesInput {
  AND: [SystemDataScalarWhereWithAggregatesInput!]
  NOT: [SystemDataScalarWhereWithAggregatesInput!]
  OR: [SystemDataScalarWhereWithAggregatesInput!]
  code: StringWithAggregatesFilter
  created_at: DateTimeWithAggregatesFilter
  description: StringNullableWithAggregatesFilter
  id: StringWithAggregatesFilter
  metadata: StringNullableWithAggregatesFilter
  updated_at: DateTimeWithAggregatesFilter
  value: StringNullableWithAggregatesFilter
}

input SystemDataUpdateInput {
  code: StringFieldUpdateOperationsInput
  created_at: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  metadata: NullableStringFieldUpdateOperationsInput
  updated_at: DateTimeFieldUpdateOperationsInput
  value: NullableStringFieldUpdateOperationsInput
}

input SystemDataUpdateManyMutationInput {
  code: StringFieldUpdateOperationsInput
  created_at: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  metadata: NullableStringFieldUpdateOperationsInput
  updated_at: DateTimeFieldUpdateOperationsInput
  value: NullableStringFieldUpdateOperationsInput
}

input SystemDataWhereInput {
  AND: [SystemDataWhereInput!]
  NOT: [SystemDataWhereInput!]
  OR: [SystemDataWhereInput!]
  code: StringFilter
  created_at: DateTimeFilter
  description: StringNullableFilter
  id: StringFilter
  metadata: StringNullableFilter
  updated_at: DateTimeFilter
  value: StringNullableFilter
}

input SystemDataWhereUniqueInput {
  code: String
  id: String
}

type User {
  _count: UserCount!
  active: Boolean!
  created_at: DateTime!
  id: String!
  installments_records(cursor: InstallmentRecordWhereUniqueInput, distinct: [InstallmentRecordScalarFieldEnum!], orderBy: [InstallmentRecordOrderByWithRelationInput!], skip: Int, take: Int, where: InstallmentRecordWhereInput): [InstallmentRecord!]!
  name: String!
  password: String!
  profile_picture: String
  role: Role!
  sale_records(cursor: SaleRecordWhereUniqueInput, distinct: [SaleRecordScalarFieldEnum!], orderBy: [SaleRecordOrderByWithRelationInput!], skip: Int, take: Int, where: SaleRecordWhereInput): [SaleRecord!]!
  token_version: Int!
  updated_at: DateTime!
}

type UserAvgAggregate {
  token_version: Float
}

input UserAvgOrderByAggregateInput {
  token_version: SortOrder
}

type UserCount {
  installments_records: Int!
  sale_records: Int!
}

type UserCountAggregate {
  _all: Int!
  active: Int!
  created_at: Int!
  id: Int!
  name: Int!
  password: Int!
  profile_picture: Int!
  role: Int!
  token_version: Int!
  updated_at: Int!
}

input UserCountOrderByAggregateInput {
  active: SortOrder
  created_at: SortOrder
  id: SortOrder
  name: SortOrder
  password: SortOrder
  profile_picture: SortOrder
  role: SortOrder
  token_version: SortOrder
  updated_at: SortOrder
}

input UserCreateInput {
  active: Boolean
  created_at: DateTime
  id: String
  installments_records: InstallmentRecordCreateNestedManyWithoutUserInput
  name: String!
  password: String!
  profile_picture: String
  role: Role
  sale_records: SaleRecordCreateNestedManyWithoutUserInput
  token_version: Int
  updated_at: DateTime
}

input UserCreateManyInput {
  active: Boolean
  created_at: DateTime
  id: String
  name: String!
  password: String!
  profile_picture: String
  role: Role
  token_version: Int
  updated_at: DateTime
}

input UserCreateNestedOneWithoutInstallments_recordsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutInstallments_recordsInput
  create: UserCreateWithoutInstallments_recordsInput
}

input UserCreateNestedOneWithoutSale_recordsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutSale_recordsInput
  create: UserCreateWithoutSale_recordsInput
}

input UserCreateOrConnectWithoutInstallments_recordsInput {
  create: UserCreateWithoutInstallments_recordsInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutSale_recordsInput {
  create: UserCreateWithoutSale_recordsInput!
  where: UserWhereUniqueInput!
}

input UserCreateWithoutInstallments_recordsInput {
  active: Boolean
  created_at: DateTime
  id: String
  name: String!
  password: String!
  profile_picture: String
  role: Role
  sale_records: SaleRecordCreateNestedManyWithoutUserInput
  token_version: Int
  updated_at: DateTime
}

input UserCreateWithoutSale_recordsInput {
  active: Boolean
  created_at: DateTime
  id: String
  installments_records: InstallmentRecordCreateNestedManyWithoutUserInput
  name: String!
  password: String!
  profile_picture: String
  role: Role
  token_version: Int
  updated_at: DateTime
}

type UserGroupBy {
  _avg: UserAvgAggregate
  _count: UserCountAggregate
  _max: UserMaxAggregate
  _min: UserMinAggregate
  _sum: UserSumAggregate
  active: Boolean!
  created_at: DateTime!
  id: String!
  name: String!
  password: String!
  profile_picture: String
  role: Role!
  token_version: Int!
  updated_at: DateTime!
}

type UserMaxAggregate {
  active: Boolean
  created_at: DateTime
  id: String
  name: String
  password: String
  profile_picture: String
  role: Role
  token_version: Int
  updated_at: DateTime
}

input UserMaxOrderByAggregateInput {
  active: SortOrder
  created_at: SortOrder
  id: SortOrder
  name: SortOrder
  password: SortOrder
  profile_picture: SortOrder
  role: SortOrder
  token_version: SortOrder
  updated_at: SortOrder
}

type UserMinAggregate {
  active: Boolean
  created_at: DateTime
  id: String
  name: String
  password: String
  profile_picture: String
  role: Role
  token_version: Int
  updated_at: DateTime
}

input UserMinOrderByAggregateInput {
  active: SortOrder
  created_at: SortOrder
  id: SortOrder
  name: SortOrder
  password: SortOrder
  profile_picture: SortOrder
  role: SortOrder
  token_version: SortOrder
  updated_at: SortOrder
}

input UserOrderByWithAggregationInput {
  _avg: UserAvgOrderByAggregateInput
  _count: UserCountOrderByAggregateInput
  _max: UserMaxOrderByAggregateInput
  _min: UserMinOrderByAggregateInput
  _sum: UserSumOrderByAggregateInput
  active: SortOrder
  created_at: SortOrder
  id: SortOrder
  name: SortOrder
  password: SortOrder
  profile_picture: SortOrder
  role: SortOrder
  token_version: SortOrder
  updated_at: SortOrder
}

input UserOrderByWithRelationInput {
  active: SortOrder
  created_at: SortOrder
  id: SortOrder
  installments_records: InstallmentRecordOrderByRelationAggregateInput
  name: SortOrder
  password: SortOrder
  profile_picture: SortOrder
  role: SortOrder
  sale_records: SaleRecordOrderByRelationAggregateInput
  token_version: SortOrder
  updated_at: SortOrder
}

input UserRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

enum UserScalarFieldEnum {
  active
  created_at
  id
  name
  password
  profile_picture
  role
  token_version
  updated_at
}

input UserScalarWhereWithAggregatesInput {
  AND: [UserScalarWhereWithAggregatesInput!]
  NOT: [UserScalarWhereWithAggregatesInput!]
  OR: [UserScalarWhereWithAggregatesInput!]
  active: BoolWithAggregatesFilter
  created_at: DateTimeWithAggregatesFilter
  id: StringWithAggregatesFilter
  name: StringWithAggregatesFilter
  password: StringWithAggregatesFilter
  profile_picture: StringNullableWithAggregatesFilter
  role: EnumRoleWithAggregatesFilter
  token_version: IntWithAggregatesFilter
  updated_at: DateTimeWithAggregatesFilter
}

type UserSumAggregate {
  token_version: Int
}

input UserSumOrderByAggregateInput {
  token_version: SortOrder
}

input UserUpdateInput {
  active: BoolFieldUpdateOperationsInput
  created_at: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  installments_records: InstallmentRecordUpdateManyWithoutUserInput
  name: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  profile_picture: NullableStringFieldUpdateOperationsInput
  role: EnumRoleFieldUpdateOperationsInput
  sale_records: SaleRecordUpdateManyWithoutUserInput
  token_version: IntFieldUpdateOperationsInput
  updated_at: DateTimeFieldUpdateOperationsInput
}

input UserUpdateManyMutationInput {
  active: BoolFieldUpdateOperationsInput
  created_at: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  profile_picture: NullableStringFieldUpdateOperationsInput
  role: EnumRoleFieldUpdateOperationsInput
  token_version: IntFieldUpdateOperationsInput
  updated_at: DateTimeFieldUpdateOperationsInput
}

input UserUpdateOneWithoutInstallments_recordsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutInstallments_recordsInput
  create: UserCreateWithoutInstallments_recordsInput
  delete: Boolean
  disconnect: Boolean
  update: UserUpdateWithoutInstallments_recordsInput
  upsert: UserUpsertWithoutInstallments_recordsInput
}

input UserUpdateOneWithoutSale_recordsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutSale_recordsInput
  create: UserCreateWithoutSale_recordsInput
  delete: Boolean
  disconnect: Boolean
  update: UserUpdateWithoutSale_recordsInput
  upsert: UserUpsertWithoutSale_recordsInput
}

input UserUpdateWithoutInstallments_recordsInput {
  active: BoolFieldUpdateOperationsInput
  created_at: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  profile_picture: NullableStringFieldUpdateOperationsInput
  role: EnumRoleFieldUpdateOperationsInput
  sale_records: SaleRecordUpdateManyWithoutUserInput
  token_version: IntFieldUpdateOperationsInput
  updated_at: DateTimeFieldUpdateOperationsInput
}

input UserUpdateWithoutSale_recordsInput {
  active: BoolFieldUpdateOperationsInput
  created_at: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  installments_records: InstallmentRecordUpdateManyWithoutUserInput
  name: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  profile_picture: NullableStringFieldUpdateOperationsInput
  role: EnumRoleFieldUpdateOperationsInput
  token_version: IntFieldUpdateOperationsInput
  updated_at: DateTimeFieldUpdateOperationsInput
}

input UserUpsertWithoutInstallments_recordsInput {
  create: UserCreateWithoutInstallments_recordsInput!
  update: UserUpdateWithoutInstallments_recordsInput!
}

input UserUpsertWithoutSale_recordsInput {
  create: UserCreateWithoutSale_recordsInput!
  update: UserUpdateWithoutSale_recordsInput!
}

input UserWhereInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  active: BoolFilter
  created_at: DateTimeFilter
  id: StringFilter
  installments_records: InstallmentRecordListRelationFilter
  name: StringFilter
  password: StringFilter
  profile_picture: StringNullableFilter
  role: EnumRoleFilter
  sale_records: SaleRecordListRelationFilter
  token_version: IntFilter
  updated_at: DateTimeFilter
}

input UserWhereUniqueInput {
  id: String
  name: String
}
